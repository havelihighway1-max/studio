
{
  "entities": {
    "GuestEntry": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GuestEntry",
      "type": "object",
      "description": "Represents a guest entry with their contact details, visit information, and feedback.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the GuestEntry entity."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the guest."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the guest."
        },
        "email": {
          "type": "string",
          "description": "The email address of the guest.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The phone number of the guest."
        },
        "visitDate": {
          "type": "string",
          "description": "The date of the guest's visit.",
          "format": "date-time"
        },
        "feedback": {
          "type": "string",
          "description": "Specific feedback or notes about the guest's experience."
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "visitDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/guest_entries/{guestEntryId}",
        "definition": {
          "entityName": "GuestEntry",
          "schema": {
            "$ref": "#/backend/entities/GuestEntry"
          },
          "description": "Collection to store all guest entries. All entries can be read by authenticated users. Includes 'guestEntryId' as the document ID.",
          "params": [
            {
              "name": "guestEntryId",
              "description": "Unique identifier for each guest entry."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to manage guest entries. It prioritizes Authorization Independence by avoiding hierarchical authorization dependencies. Guest entries are stored in a top-level collection, which ensures security rules can be applied consistently across all documents within that collection.\n\n**Authorization Independence:** No `get()` calls are needed in security rules because access control is determined by the absence of ownership (guest entries, all entries can be read by any authenticated user).\n\n**QAPs Support:**\n*   List operation is secured because there are no custom claims and authorization depends solely on request.auth.uid.\n"
  }
}

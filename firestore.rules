/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset provides full access to all data for all users, including unauthenticated users.
 * This configuration is intended for rapid prototyping and should NOT be used in a production environment.
 *
 * Core Philosophy: Open access for all users.
 *
 * Data Structure:
 * - /guests/{guestId}: Stores individual records of guest visits.
 * - /reservations/{reservationId}: Stores all guest reservations.
 * - /tables/{tableId}: Stores the restaurant's table layout and capacity.
 * - /waitingGuests/{waitingGuestId}: Stores the list of guests currently waiting for a table.
 *
 * Key Security Decisions:
 * - Unrestricted read access to all collections.
 * - Unrestricted write access to all collections.
 * - No data validation is performed in this prototyping configuration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any user to read, create, update, and delete guest records.
     * @path /guests/{guestId}
     * @allow (read, write) Any user can read and write guest data.
     * @deny (none) This rule provides open access.
     * @principle Unrestricted access for prototyping.
     */
    match /guests/{guestId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows any user to read, create, update, and delete reservation records.
     * @path /reservations/{reservationId}
     * @allow (read, write) Any user can read and write reservation data.
     * @deny (none) This rule provides open access.
     * @principle Unrestricted access for prototyping.
     */
    match /reservations/{reservationId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows any user to read, create, update, and delete table records.
     * @path /tables/{tableId}
     * @allow (read, write) Any user can read and write table data.
     * @deny (none) This rule provides open access.
     * @principle Unrestricted access for prototyping.
     */
    match /tables/{tableId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows any user to read, create, update, and delete waiting guest records.
     * @path /waitingGuests/{waitingGuestId}
     * @allow (read, write) Any user can read and write waiting guest data.
     * @deny (none) This rule provides open access.
     * @principle Unrestricted access for prototyping.
     */
    match /waitingGuests/{waitingGuestId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }
  }
}